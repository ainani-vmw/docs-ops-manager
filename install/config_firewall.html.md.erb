---
title: Preparing Your Firewall
owner: Ops Manager
---

This topic describes how to configure your firewall and how to verify that component VMs correctly resolve DNS entries behind your firewall.


## <a id='firewall_configuration'></a> Configure Your Firewall

<%= vars.ops_manager %> and <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) require the following open TCP ports:

* **25555:** Routes from <%= vars.ops_manager %> VM to the BOSH Director.
* **443:** If configured, routes to your own load balancer.
* **80:** If configured, routes to your own load balancer.
* **8844:** Routes from <%= vars.ops_manager %> VM to BOSH CredHub.
* **8443:** Routes from <%= vars.ops_manager %> VM to BOSH Director UAA.
* **6868:** Routes to the BOSH Agent.
* **2222:** Necessary for using App SSH. For more information, see the [<%= vars.app_runtime_abbr %>
documentation](https://docs.pivotal.io/application-service/concepts/#diagram).
* **25595:** Routes from the Traffic Controller to the BOSH Director, to enable sending BOSH health metrics to the Firehose.
* **For vSphere Only:** <%= partial '../common/vsphere-firewall-ports' %>

If you want to use an external NTP server, UDP port `123` must be open.

For more information about required ports for additional installed products, see [Network Communication Paths in
<%= vars.ops_manager %>](../security/networking/index.html#net_commpaths) in _Network Security_.

### <a id='example'></a> Example: Configure Firewall with iptables

The following example procedure uses `iptables` commands to configure a firewall.

<p class='note'><strong>Note:</strong> <code>GATEWAY_EXTERNAL_IP</code> is a placeholder. Replace this value with your <code>PUBLIC_IP</code>.</p>

1. Open `/etc/sysctl.conf`, a file that contains configurations for Linux kernel settings, by running:

    ```
    sudo vi /etc/sysctl.conf
    ```

1. Add the line `net.ipv4.ip_forward=1` to `/etc/sysctl.conf` and save the file.

1. To remove all existing filtering or Network Address Translation (NAT) rules, run:

    ```
    iptables --flush
    iptables --flush -t nat
    ```

1. Add environment variables to use when creating the IP rules by running:

    ```
    export INTERNAL_NETWORK_RANGE=10.0.0.0/8
    export GATEWAY_INTERNAL_IP=10.0.0.1
    export GATEWAY_EXTERNAL_IP=203.0.113.242
    export VMWARETANZU_IP=10.0.0.2
    export LOAD_BALANCER_IP=10.0.0.254
    ```

1. To configure IP rules for the specified chains, run:
  * **FORWARD:**

      ```
      iptables -A FORWARD -i eth1 -j ACCEPT
      iptables -A FORWARD -o eth1 -j ACCEPT
      ```
  * **POSTROUTING:**

      ```
      iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
      iptables -t nat -A POSTROUTING -d $LOAD_BALANCER_IP -s $INTERNAL_NETWORK_RANGE \
              -p tcp --dport 80 -j SNAT --to $GATEWAY_INTERNAL_IP
      iptables -t nat -A POSTROUTING -d $LOAD_BALANCER_IP -s $INTERNAL_NETWORK_RANGE \
              -p tcp --dport 443 -j SNAT --to $GATEWAY_INTERNAL_IP
  	  ```
  * **PREROUTING:**

      ```
      iptables -t nat -A PREROUTING -d $GATEWAY_EXTERNAL_IP -p tcp --dport \
               25555 -j DNAT --to $VMWARETANZU_IP
      iptables -t nat -A PREROUTING -d $GATEWAY_EXTERNAL_IP -p tcp --dport \
               443 -j DNAT --to $LOAD_BALANCER_IP
      iptables -t nat -A PREROUTING -d $GATEWAY_EXTERNAL_IP -p tcp --dport \
               80 -j DNAT --to $LOAD_BALANCER_IP
      iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8443 -j DNAT \
            --to $VMWARETANZU_IP:443
      iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT \
            --to $LOAD_BALANCER_IP:80
      iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8022 -j DNAT \
            --to $VMWARETANZU_IP:22
      iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8080 -j DNAT \
            --to $VMWARETANZU_IP:80
  	  ```

1. Save the iptables by running:

    ```
    service iptables save
    ```

For more information about administering IP tables with `iptables`, see the [iptables documentation](http://ipset.netfilter.org/iptables.man.html).


## <a id='DNS_fails'></a> Verify that Component VMs Resolve DNS Entries Behind Your Firewall

When you install <%= vars.ops_manager %> in an environment that uses a strong firewall, the firewall might block DNS resolution. For example, if you use
`xip.io` to test your DNS configuration, the tests fail without warning if the firewall prevents <%= vars.app_runtime_abbr %> from accessing `*.xip.io`.

To verify that component VMs can correctly resolve DNS entries:

1. SSH into the <%= vars.ops_manager %> VM by following the procedure in [Log Into the <%= vars.ops_manager %> VM with SSH](ssh-login.html#ssh-by-iaas) in
_Logging Into Ops Manager VMs with SSH_.

1. Run any of the following network administration commands with the IP address of the VM:
  * `nslookup`
  * `dig`
  * `host`
  * The appropriate `traceroute` command for your OS

1. Review the output of the command and fix any blocked routes. If the output displays an error message, review the firewall logs to determine which blocked
route or routes you need to clear.

1. Repeat steps 1-3 with the BOSH Director VM.
