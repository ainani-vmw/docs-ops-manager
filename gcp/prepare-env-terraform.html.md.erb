---
title: Deploying Ops Manager on GCP using Terraform
owner: Ops Manager
iaas: GCP
install_type: terraform
---

Follow these steps before you install <%= vars.ops_manager_first %> on Google Cloud Platform (GCP) using Terraform templates.

<%= partial "/pcf/warning-terraform" %>

The Terraform template for <%= vars.ops_manager %> on GCP describes a set of GCP resources and properties. For more information about how Terraform creates resources in GCP, see [Google Cloud Provider](https://www.terraform.io/docs/providers/google/index.html) on the Terraform site.

You might find it helpful to review different deployment options in [Reference Architecture for <%= vars.ops_manager %> on GCP](../refarch/gcp/gcp_ref_arch.html).


## <a id='prereqs'></a> Prerequisites

In addition to fulfilling the prerequisites listed in [Installing <%= vars.ops_manager %> on GCP](../install/gcp.html), ensure you have the following:

* The [Terraform CLI](https://www.terraform.io/intro/getting-started/install.html)

* The [Google Cloud SDK](https://cloud.google.com/sdk/docs/quickstarts)

* In your GCP project, enable the following APIs:
  * [Identity and Access Management](https://console.developers.google.com/apis/api/iam.googleapis.com)
  * [Cloud Resource Manager](https://console.developers.google.com/apis/api/cloudresourcemanager.googleapis.com/)
  * [Cloud DNS](https://console.developers.google.com/apis/api/dns/overview)
  * [Cloud SQL API](https://console.developers.google.com/apis/api/sqladmin/overview)
  * [Compute Engine API](https://console.developers.google.com/apis/api/compute/overview)


## <a id='svc-key'></a> Step 1: Obtain a GCP service account key file

To use the Terraform templates to create the necessary infrastructure
resources for <%= vars.ops_manager %>, you need a service account key file.
<br><br>
To create an account key file, follow the procedure that goes with your own use case.

  <ul>
    <li>**I already have a service account I want to use:**</li>
    <ol>
      <li>Go to the GCP console.</li>
      <li>Select **IAM** and locate your service account.</li>
      <li>From the **Options** column, open the dropdown and click **Create Key**.</li>
    </ol>
    <li>**I want to create a new service account:**</li>
    <ol>
      <li>Open a terminal window.</li>
      <li>To create a service account using the gcloud CLI, run the following command:</li>
      <pre>gcloud iam service-accounts create ACCOUNT-NAME</pre>
      <li>To create a key file for your service account, run the following command:</li>
      <pre>gcloud iam service-accounts keys create "terraform.key.json" --iam-account "ACCOUNT-NAME&#64;PROJECT-ID.iam.gserviceaccount.com"</pre>
      <li>To bind the service account to your project and give it the owner role, run the following command:</li>
      <pre>gcloud projects add-iam-policy-binding PROJECT-ID --member 'serviceAccount&#58;ACCOUNT-NAME&#64;PROJECT-ID.iam.gserviceaccount.com' --role 'roles/owner'</pre>
      <br>
      Where:
      <ul>
        <li><code>ACCOUNT-NAME</code> is the name you want to apply to the new account.</li>
        <li><code>PROJECT-ID</code> is your Google Cloud Platform Project ID. </li>
      </ul>
    </ol>
  </ul>


## <a id='download'></a> Step 2: Download templates and edit variables file

Before you can run Terraform commands to provision infrastructure resources,
you must download the GCP Terraform Templates and create a Terraform template variables
file:

1. On [VMware Tanzu Network](https://network.pivotal.io), go to the <%= vars.app_runtime_first %> release.

1. Download the GCP Terraform ZIP file.

1. Extract the contents of the ZIP file.

1. Move the extracted folder to the `workspace` directory on your local machine.

1. On the command line, go to the directory. For example:

    <pre class="terminal">
    $ cd ~/workspace/pivotal-cf-terraforming-gcp
    </pre>

1. Go to the `terraforming-pas` or `terraforming-pks` directory that contains
the Terraform files for your runtime.

1. In the runtime directory, create a text file named `terraform.tfvars`.

1. Open the `terraform.tfvars` file and add the following:

    <p> Ensure that you insert a new line at the end of the file.</p>

    ```
    env_name         = "YOUR-ENVIRONMENT-NAME"
    opsman_image_url = "YOUR-OPS-MAN-IMAGE-URL"
    region           = "YOUR-GCP-REGION"
    zones            = ["YOUR-AZ-1", "YOUR-AZ-2", "YOUR-AZ-3"]
    project          = "YOUR-GCP-PROJECT"
    dns_suffix       = "YOUR-DNS-SUFFIX"

    ssl_cert = <<SSL_CERT
    -----BEGIN CERTIFICATE-----
    YOUR-CERTIFICATE
    -----END CERTIFICATE-----
    SSL_CERT

    ssl_private_key = <<SSL_KEY
    -----BEGIN EXAMPLE RSA PRIVATE KEY-----
    YOUR-PRIVATE-KEY
    -----END EXAMPLE RSA PRIVATE KEY-----
    SSL_KEY

    service_account_key = <<SERVICE_ACCOUNT_KEY
    YOUR-KEY-JSON
    SERVICE_ACCOUNT_KEY

    ```

1. Edit the values in the file according to the following table:
  <table>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in GCP. Terraform prepends the names of the resources it creates with this environment name. Example: <code>pcf</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-IMAGE-URL</code></td>
      <td>
        Enter the source URL of the <%= vars.ops_manager %> image you want to boot. You can find this URL in the PDF included with
        the <%= vars.ops_manager %> release on <a href="https://network.pivotal.io/">VMware Tanzu Network</a>.
        <br><br>
        To prevent the creation of an <%= vars.ops_manager %> VM, set this value to an empty string (<code>""</code>). When using Platform Automation, you must disallow the creation of the <%= vars.ops_manager %> VM from Terraform.
        For more information, see <a href="https://docs.pivotal.io/platform-automation/v5.1/">Platform Automation</a>.
      </td>
    </tr>
    <tr>
      <td><code>YOUR-GCP-REGION</code></td>
      <td>Enter the name of the GCP region in which you want Terraform to create resources. Example: <code>us-central1</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZ-1<br>YOUR-AZ-2<br>YOUR-AZ-3</code></td>
      <td>Enter three availability zones from your region. Example: <code>us-central1-a</code>, <code>us-central1-b</code>, <code>us-central1-c</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-GCP-PROJECT</code></td>
      <td>Enter the name of the GCP project in which you want Terraform to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-DNS-SUFFIX</code></td>
      <td>Enter a domain name to use as part of the system domain for your <%= vars.ops_manager %> deployment. Terraform creates DNS records in GCP using <code>YOUR-ENVIRONMENT-NAME</code> and <code>YOUR-DNS-SUFFIX</code>. For example, if you enter <code>example.com</code> for your DNS suffix and have <code>pcf</code> as your environment name, Terraform creates DNS records at <code>pcf.example.com</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-CERTIFICATE</code></td>
      <td>Enter a certificate to use for HTTP load balancing. For production environments, use a certificate from a Certificate Authority (CA). For test environments, you can use a self-signed certificate.

      Your certificate must specify your system domain as the common name. Your system domain is <code>YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX</code>.

      It also must include the following subdomains: <code>\*.sys.YOUR-SYSTEM-DOMAIN</code>, <code>\*.login.sys.YOUR-SYSTEM-DOMAIN</code>, <code>\*.uaa.sys.YOUR-SYSTEM-DOMAIN</code>, <code>\*.apps.YOUR-SYSTEM-DOMAIN</code>.</p></td>
    </tr>
    <tr>
      <td><code>YOUR-PRIVATE-KEY</code></td>
      <td>Enter a private key for the certificate you entered.</td>
    </tr>
    <tr>
      <td><code>YOUR-KEY-JSON</code></td>
      <td>Enter the contents of your service account key file. This file is in JSON format.</td>
    </tr>
  </table>


## <a id='variables'></a> Step 3: Add optional variables

Complete this step if you want to do any of the following:

* Change the default CIDR ranges

* Deploy the <%= vars.segment_runtime_full %> tile

* Use an external Google Cloud SQL database

* Use external Google Storage buckets

* Deactivate generated GCP service account key for blobstore

In your `terraform.tfvars` file, specify the appropriate variables from the following sections.

<p> You can see the configurable options by opening the <code>variables.tf</code> file and looking for
variables with default values.</p>

### <a id='subnet_cidr'></a> CIDR ranges for subnets

If you want to change the CIDR ranges for the infrastructure, your runtime, or services networks that Terraform creates, add the following variables to your `terraform.tfvars` file, replacing `YOUR-INFRASTRUCTURE-CIDR`, `YOUR-RUNTIME-CIDR` and `YOUR-SERVICES-CIDR` with your desired values.

```
infrastructure_cidr = YOUR-INFRASTRUCTURE-CIDR
pas_cidr = YOUR-RUNTIME-CIDR
services_cidr = YOUR-SERVICES-CIDR
```

### <a id='iso_seg'></a> Isolation segments

If you plan to deploy the <%= vars.segment_runtime_full %> tile, add the following variables to your `terraform.tfvars` file, replacing `YOUR-CERTIFICATE` and `YOUR-PRIVATE-KEY` with a certificate and private key. This causes Terraform to create an additional HTTP load balancer across three availability zones to use for the <%= vars.segment_runtime_full %> tile.

```
isolation_segment = true
iso_seg_ssl_cert = <<ISO_SEG_SSL_CERT
-----BEGIN CERTIFICATE-----
YOUR-CERTIFICATE
-----END CERTIFICATE-----
ISO_SEG_SSL_CERT
iso_seg_ssl_cert_private_key = <<ISO_SEG_SSL_KEY
-----BEGIN EXAMPLE RSA PRIVATE KEY-----
YOUR-PRIVATE-KEY
-----END EXAMPLE RSA PRIVATE KEY-----
ISO_SEG_SSL_KEY
```

### <a id='cloudsql'></a> External database

1. If you want to use an external Google Cloud SQL database for <%= vars.ops_manager %> and <%= vars.app_runtime_abbr %>, add the following to your `terraform.tfvars` file:

    ```
    external_database = true
    ```

1. If you want to specify a single host from which users can connect to the <%= vars.ops_manager %> and runtime databases, add the following to your `terraform.tfvars` file.

    ```
    opsman_sql_db_host = HOST-IP-ADDRESS
    pas_sql_db_host = HOST-IP-ADDRESS
    ```

    Where `HOST-IP-ADDRESS` is your desired IP address(es).

### <a id='gcs'></a> External storage buckets

If you want to use Google Cloud Storage buckets for the <%= vars.app_runtime_abbr %> Cloud Controller, add the following to your `terraform.tfvars` file:

```
create_gcs_buckets = true
```

### <a id='gcs'></a> GCP service account key for blobstore

If you want to provide your own service account for blob storage instead of using a generated service account, add the following to your `terraform.tfvars` file:

```
create_blobstore_service_account_key = false
```


## <a id='resources'></a> Step 4: Create GCP resources with Terraform

Follow these steps to use the Terraform CLI to create resources on GCP:

1. From the directory that contains the Terraform files, run the following command to initialize the directory based on the information you specified in the `terraform.tfvars` file.
    <pre>terraform init</pre>

1. Run the following command to create the execution plan for Terraform.
    <pre>terraform plan -out=plan</pre>

1. To do the plan from the previous step, run the following command:
    <pre>terraform apply plan</pre>

    <p> It might take several minutes for Terraform to create all the resources in GCP.</p>


## <a id='dns'></a> Step 5: Create DNS record

1. In a browser, go to the DNS provider for the DNS suffix you entered in your `terraform.tfvars` file.

1. Create a new NS (Name server) record for your <%= vars.ops_manager %> system domain. Your system domain is `YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX`.
  1. In this record, enter the name servers included in `env_dns_zone_name_servers` from your Terraform output.


## <a id='next'></a> Next steps

After you complete this procedure, follow the instructions in [Configuring BOSH Director on GCP Using Terraform](config-terraform.html).
