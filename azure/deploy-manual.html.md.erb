---
title: Deploying Ops Manager on Azure
owner: Ops Manager
---

<html class="list-style-none"></html>

This topic describes how to deploy BOSH and <%= vars.ops_manager_first %> on Azure by using individual commands to create resources. <%= vars.company_name %> recommends this manual procedure for deploying to Azure China, Azure Germany, and Azure Government Cloud.

Before you perform the procedures in this topic, you must have completed the procedures in [Preparing to Deploy <%= vars.ops_manager %> on Azure](prepare-env-manual.html). After you complete the procedures in this topic, follow the instructions in [Configuring BOSH Director on Azure](config-manual.html).

<p class='note'><strong>Note:</strong> If you are deploying BOSH and <%= vars.ops_manager %> on Azure Stack, complete the procedures in <a href="https://docs.microsoft.com/en-us/azure/azure-stack/user/azure-stack-connect-cli">Install and configure CLI for use with Azure Stack</a> in the Microsoft documentation before following the procedures in this topic.</p>

<p class='note'><strong>Note:</strong> The Azure portal sometimes displays the names of resources with incorrect capitalization. Always use the Azure CLI to retrieve the correctly capitalized name of a resource.</p>


## <a id='network'></a> Step 1: Create Network Resources

To create network resources for your deployment:

1. Navigate to the Azure portal, click **Resource groups**, and click **Add** to create a new resource group for your deployment.

1. Enter a **Resource group name**, select your **Subscription**, and select a **Resource group location**. Click **Create**.

1. Export the name of your resource group as the environment variable `$RESOURCE_GROUP`.

    ```console
    export RESOURCE_GROUP="YOUR-RESOURCE-GROUP-NAME"
    ```

    <p class='note'><strong>Note:</strong> If you are on a Windows machine, you can use <code>set</code> instead of <code>export</code>.</p>

1. Export your location. For example, `westus`.

    ```console
    export LOCATION=westus
    ```

    For a list of available locations, run `az account list-locations`.

1. Create a network security group named `pcf-nsg`.

    ```console
    az network nsg create --name pcf-nsg \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION
    ```

1. Add network security group rules to the `pcf-nsg` group to allow traffic to known ports from the public Internet.

    ```console
    az network nsg rule create --name ssh \
    --nsg-name pcf-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 100 \
    --destination-port-range '22'
    ```

    ```console
    az network nsg rule create --name http \
    --nsg-name pcf-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 200 \
    --destination-port-range '80'
    ```

    ```console
    az network nsg rule create --name https \
    --nsg-name pcf-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 300 \
    --destination-port-range '443'
    ```

    ```console
    az network nsg rule create --name diego-ssh \
    --nsg-name pcf-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 400 \
    --destination-port-range '2222'
    ```

     * To block traffic from the public Internet, append `--source-address-prefixes AzureLoadBalancer` to allow traffic from only the Azure load balancer or `--source-address-prefixes VirtualNetwork` to only allow traffic from the virtual network.
     * To allow traffic from both the Azure load balancer and the virtual network, create duplicates of each rule, one specifying `--source-address-prefixes AzureLoadBalancer` and one specifying `--source-address-prefixes VirtualNetwork`.

1. Create a network security group named `opsmgr-nsg`.

    ```console
    az network nsg create --name opsmgr-nsg \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION
    ```

1. Add a network security group rule to the `opsmgr-nsg` group to allow HTTP traffic to the <%= vars.ops_manager %> VM.

    ```console
    az network nsg rule create --name http \
    --nsg-name opsmgr-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 100 \
    --destination-port-range 80
    ```

1. Add a network security group rule to the `opsmgr-nsg` group to allow HTTPS traffic to the <%= vars.ops_manager %> VM.

    ```console
    az network nsg rule create --name https \
    --nsg-name opsmgr-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 200 \
    --destination-port-range 443
    ```

1. Add a network security group rule to the `opsmgr-nsg` group to allow SSH traffic to the <%= vars.ops_manager %> VM.

    ```console
    az network nsg rule create --name ssh \
    --nsg-name opsmgr-nsg --resource-group $RESOURCE_GROUP \
    --protocol Tcp --priority 300 \
    --destination-port-range 22
    ```

    * To block traffic from the public Internet, append `--source-address-prefixes AzureLoadBalancer` to allow traffic from only the Azure load balancer or `--source-address-prefixes VirtualNetwork` to only allow traffic from the virtual network.
    * To allow traffic from both the Azure load balancer and the virtual network, create duplicates of each rule, one specifying `--source-address-prefixes AzureLoadBalancer` and one specifying `--source-address-prefixes VirtualNetwork`.
    * Optionally, if you want to use private IP ranges with <%= vars.ops_manager %> and allow all internal traffic, you can create the Network Security Groups to allow all internal traffic.

        ```console
        az network nsg rule create --name internal-virtual-network \
        --nsg-name internal-traffic --resource-group $RESOURCE_GROUP \
        --protocol Tcp --priority 100 \
        --destination-port-range * \
        --source-address-prefixes VirtualNetwork
        az network nsg rule create --name internal-from-lb \
        --nsg-name internal-traffic --resource-group $RESOURCE_GROUP \
        --protocol Tcp --priority 110 \
        --destination-port-range * \
        --source-address-prefixes AzureLoadBalancer
        ```

1. Create a virtual network named `pcf-virtual-network`.

    ```console
    az network vnet create --name pcf-virtual-network \
    --resource-group $RESOURCE_GROUP --location $LOCATION \
    --address-prefixes 10.0.0.0/16
    ```

1. Add subnets to the network for <%= vars.ops_manager %>, BOSH director, and the VMs for your runtime, and attach the Network Security Group.

    ```console
    az network vnet subnet create --name pcf-infrastructure-subnet \
    --vnet-name pcf-virtual-network \
    --resource-group $RESOURCE_GROUP \
    --address-prefix 10.0.4.0/26 \
    --network-security-group pcf-nsg
    az network vnet subnet create --name pcf-pas-subnet \
    --vnet-name pcf-virtual-network \
    --resource-group $RESOURCE_GROUP \
    --address-prefix 10.0.12.0/22 \
    --network-security-group pcf-nsg
    az network vnet subnet create --name pcf-services-subnet \
    --vnet-name pcf-virtual-network \
    --resource-group $RESOURCE_GROUP \
    --address-prefix 10.0.8.0/22 \
    --network-security-group pcf-nsg
    ```


## <a id='storage'></a> Step 2: Create BOSH and Deployment Storage Accounts

<%= vars.ops_manager %> on Azure uses multiple general-purpose Azure storage accounts. The BOSH and <%= vars.ops_manager %> VMs use one main BOSH account, and the other components share five or more deployment storage accounts.

To create storage accounts for BOSH and your deployment:

1. Choose a name for your BOSH storage account, and export it as the environment variable `$STORAGE_NAME`. Storage account names must be globally unique across Azure, between 3 and 24 characters in length, and contain only lowercase letters and numbers.

    ```console
    export STORAGE_NAME="YOUR-BOSH-STORAGE-ACCOUNT-NAME"
    ```

1. Create a Standard storage account for BOSH with the following command. This account will be used for BOSH bookkeeping and running the <%= vars.ops_manager %> VM itself, but does not have to be used for running any other VMs.

    ```console
    az storage account create --name $STORAGE_NAME \
    --resource-group $RESOURCE_GROUP \
    --sku Standard_LRS \
    --location $LOCATION
    ```

    <p class='note'><strong>Note:</strong> <code>Standard_LRS</code> refers to a Standard Azure storage account. The BOSH Director requires table storage to store stemcell information. Azure Premium storage does not support table storage and cannot be used for the BOSH storage account.</p>
    If the command fails, ensure you have followed the rules for naming your storage account. Export another new storage account name if necessary.

1. Configure the Azure CLI to use the BOSH storage account as its default.

    1. Retrieve the connection string for the account.

        ```console
        az storage account show-connection-string \
        --name $STORAGE_NAME --resource-group $RESOURCE_GROUP
        ```

        The command returns output similar to the following:

        <pre class="terminal">
        {
          "connectionString": "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=cfdocsboshstorage;AccountKey=EXAMPLEaaaaabbbrnc5igFxYWsgq016Tu9uGwseOl8bqNBEL/2tp7wX92QMUM19Pz9BYTXt8aq4A=="
        }
        </pre>

    1. Record the full value of `connectionString` from the output above, starting with and including `DefaultEndpointsProtocol=`.

    1. Export the value of `connectionString` as the environment variable `$CONNECTION_STRING`.

        ```console
        export CONNECTION_STRING="YOUR-ACCOUNT-KEY-STRING"
        ```

1. Create three blob containers in the BOSH storage account, named `opsmanager`, `bosh`, and `stemcell`.

    ```console
    az storage container create --name opsmanager \
    --connection-string $CONNECTION_STRING
    az storage container create --name bosh \
    --connection-string $CONNECTION_STRING
    az storage container create --name stemcell \
    --connection-string $CONNECTION\STRING
    ```

1. Create a table named `stemcells`.

    ```console
    az storage table create --name stemcells \
    --connection-string $CONNECTION_STRING
    ```

1. Choose a set of unique names for five or more deployment storage accounts. As with the BOSH storage account above, the names must be unique, alphanumeric, lowercase, and 3-24 characters long. The account names must also be sequential or otherwise identical except for the last character. For example: `xyzdeploystorage1`, `xyzdeploystorage2`, `xyzdeploystorage3`, `xyzdeploystorage4`, and `xyzdeploystorage5`.

1. Decide which type of storage to use and run the corresponding command below.

    <p class='note'><strong>Note:</strong> <%= vars.company_name %> recommends five Premium storage accounts, which provides a reasonable amount of initial storage capacity. You can use either Premium or Standard storage accounts, but they have very different scalability metrics. <%= vars.company_name %> recommends creating 1 Standard storage account for every 30 VMs, or 1 Premium storage account for every 150 VMs. You can increase the number of storage accounts later by provisioning more and following the naming sequence.</p>

    * To use Premium storage (recommended):

        ```console
        export STORAGE_TYPE="Premium_LRS"
        ```
    *  To use Standard storage:

        ```console
        export STORAGE_TYPE="Standard_LRS"
        ```

1. For each deployment storage account you create:

    1. Create the storage account with the following command, replacing `MY_DEPLOYMENT_STORAGE_X` with one of your deployment storage account names.

        ```console
        az storage account create --name MY_DEPLOYMENT_STORAGE_X \
        --resource-group $RESOURCE_GROUP --sku $STORAGE_TYPE \
        --kind Storage --location $LOCATION
        ```

        If the command fails, try a different set of account names.

    1. Retrieve the connection string for the account.

        ```console
        az storage account show-connection-string \
        --name MY_DEPLOYMENT_STORAGE_X --resource-group $RESOURCE_GROUP
        ```

        The command returns output similar to the following:

        <pre class="terminal">
        {
          "connectionString": "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=cfdocsdeploystorage1;AccountKey=EXAMPLEaaaaaaaQiSAmqj1OocsGhKBwnMf8wEwdeJMvvonrbmNk27bfkSL8ZFzAhs3Kb78si5CTPHhjHHiK4qPcYzn/8OmFg=="
        }
        </pre>

    1. Record the full value of `connectionString` from the output above, starting with and including `DefaultEndpointsProtocol=`.

    1. Create two blob containers named `bosh` and `stemcell` in the account.

        ```console
        az storage container create --name bosh \
        --connection-string $CONNECTION_STRING
        ```
        ```console
        az storage container create --name stemcell \
        --connection-string $CONNECTION_STRING
        ````


## <a id='lb'></a> Step 3: Create Load Balancers

Your load balancer configuration depends on whether you want apps to be available from public IP addresses, private IP addresses, or both.

To create load balancers:

1. **Required:** <%= vars.app_runtime_abbr %> Load Balancer
    1. Create a load balancer named `pcf-lb`. A static IP address will be automatically created for Standard SKU load balancers unless specified otherwise with `--public-ip-address-allocation Dynamic`.

        ```console
        az network lb create --name pcf-lb \
        --resource-group $RESOURCE_GROUP --location $LOCATION \
        --backend-pool-name pcf-lb-be-pool --frontend-ip-name pcf-lb-fe-ip \
        --public-ip-address pcf-lb-ip --public-ip-address-allocation Static \
        --sku Standard
        ```

        <p class='note'><strong>Note:</strong> If the Standard SKU is not available in Azure China, you can use the Basic SKU.</p>

        This back end pool is empty when you create it.
    1. Add a probe to the load balancer.

        ```console
        az network lb probe create --lb-name pcf-lb \
        --name http8080 --resource-group $RESOURCE_GROUP \
        --protocol Http --port 8080 --path health
        ```

    1. Add a load balancing rule for HTTP.

        ```console
        az network lb rule create --lb-name pcf-lb \
        --name http --resource-group $RESOURCE_GROUP \
        --protocol Tcp --frontend-port 80 \
        --backend-port 80 --frontend-ip-name pcf-lb-fe-ip \
        --backend-pool-name pcf-lb-be-pool \
        --probe-name http8080
        ```

    1. Add a load balancing rule for HTTPS.

        ```console
        az network lb rule create --lb-name pcf-lb \
        --name https --resource-group $RESOURCE_GROUP \
        --protocol Tcp --frontend-port 443 \
        --backend-port 443 --frontend-ip-name pcf-lb-fe-ip \
        --backend-pool-name pcf-lb-be-pool \
        --probe-name http8080
        ```

    1. (Optional) For private IPs:
        1. Create a load balancer named `pcf-lb`.

            ```console
            az network lb create --name pcf-lb \
            --resource-group $RESOURCE_GROUP --location $LOCATION \
            --backend-pool-name pcf-lb-be-pool --frontend-ip-name pcf-lb-fe-ip \
            --private-ip-address 10.0.12.6 --sku Standard \
            --vnet-name pcf-virtual-network \
            --subnet pcf-pas-subnet
            ```

        1. Add a probe to the load balancer.

            ```console
            az network lb probe create --lb-name pcf-lb \
            --name http8080 --resource-group $RESOURCE_GROUP \
            --protocol Http --port 8080 --path health
            ```

        1. Add a load balancing rule for HTTP.

            ```console
            az network lb rule create --lb-name pcf-lb \
            --name http --resource-group $RESOURCE_GROUP \
            --protocol Tcp --frontend-port 80 \
            --backend-port 80 --frontend-ip-name pcf-lb-fe-ip \
            --backend-pool-name pcf-lb-be-pool \
            --probe-name http8080
            ```

        1. Add a load balancing rule for HTTPS.

            ```console
            az network lb rule create --lb-name pcf-lb \
            --name https --resource-group $RESOURCE_GROUP \
            --protocol Tcp --frontend-port 443 \
            --backend-port 443 --frontend-ip-name pcf-lb-fe-ip \
            --backend-pool-name pcf-lb-be-pool \
            --probe-name http8080
            ```

            <p class='note'><strong>Note:</strong> If the Standard SKU is not available in Azure China, you can use the Basic SKU.</p>

            This back end pool is empty when you create it.

    1.  Navigate to your DNS provider and create an entry that points `*.YOUR-SUBDOMAIN` to the public IP address of your load balancer. For example, create an entry that points `azure.example.com` to `198.51.100.1`. You can retrieve it by running `az network public-ip show --name pcf-lb-ip --resource-group $RESOURCE_GROUP`.

1. **Optional:** Diego SSH Load Balancer
    1. Create a load balancer named `pcf-ssh-lb`.

        ```console
        az network lb create --name pcf-ssh-lb \
        --resource-group $RESOURCE_GROUP --location $LOCATION \
        --backend-pool-name pcf-ssh-lb-be-pool --frontend-ip-name pcf-ssh-lb-fe-ip \
        --public-ip-address pcf-ssh-lb-ip --public-ip-address-allocation Static \
        --sku Standard
        ```

        <p class='note'><strong>Note:</strong> If the Standard SKU is not available in Azure China, you can use the Basic SKU.</p>

        This back end pool is empty when you create it.

    1. (Optional) For private IPs, create a load balancer named `pcf-ssh-lb`.

        ```console
        az network lb create --name pcf-ssh-lb \
        --resource-group $RESOURCE_GROUP --location $LOCATION \
        --backend-pool-name pcf-ssh-lb-be-pool --frontend-ip-name pcf-ssh-lb-fe-ip \
        --private-ip-address 10.0.12.7 \
        --sku Standard \
        --vnet-name pcf-virtual-network \
        --subnet pcf-pas-subnet
        ```

        <p class='note'><strong>Note:</strong> If the Standard SKU is not available in Azure China, you can change to use the Basic SKU.</p>

        This back end pool is empty when you create it.

    1. Add a probe to the load balancer.

        ```console
        az network lb probe create --lb-name pcf-ssh-lb \
        --name tcp2222 --resource-group $RESOURCE_GROUP \
        --protocol Tcp --port 2222
        ```

    1. Add a load balancing rule for SSH.

        ```console
        az network lb rule create --lb-name pcf-ssh-lb \
        --name diego-ssh --resource-group $RESOURCE_GROUP \
        --protocol Tcp --frontend-port 2222 \
        --backend-port 2222 --frontend-ip-name pcf-ssh-lb-fe-ip \
        --backend-pool-name pcf-ssh-lb-be-pool \
        --probe-name tcp2222
        ```

    1.  Navigate to your DNS provider, and create an entry that points `ssh.sys.YOUR-SUBDOMAIN` to the public IP address of your load balancer. For example, create an entry that points `azure.example.com` to `198.51.100.1`. You can retrieve it by running `az network public-ip show --name pcf-ssh-lb-ip --resource-group $RESOURCE_GROUP`.


## <a id='boot'></a> Step 4: Boot <%= vars.ops_manager %>

To boot <%= vars.ops_manager %>:

1. Navigate to [VMware Tanzu Network](https://network.pivotal.io/products/ops-manager) and download the latest release of **<%= vars.ops_manager %> for Azure**.

1. View the downloaded PDF and locate the <%= vars.ops_manager %> image URL appropriate for your region.

1. Export the <%= vars.ops_manager %> image URL as an environment variable.

    ```console
    export OPS_MAN_IMAGE_URL="YOUR-OPS-MAN-IMAGE-URL"
    ```

1. Download the <%= vars.ops_manager %> image. For compatibility when upgrading to future versions of <%= vars.ops_manager %>, choose a unique name for the image that includes the <%= vars.ops_manager %> version number. For example, replace `opsman-image-2.6.x` in the following examples with `opsman-image-2.6.1`.

    * If you use unmanaged disks, perform the following steps:

        <p class='note'><strong>Note:</strong> Azure Stack requires unmanaged disks.</p>

        1. Download the <%= vars.ops_manager %> image to your local machine. The image size is 10&nbsp;GB.

            ```console
            wget $OPS_MAN_IMAGE_URL -O opsman-image-2.6.x.vhd
            ```

        1. Upload the image to your storage account using the Azure CLI.

            ```console
            az storage blob upload --name opsman-image-2.6.x.vhd \
            --connection-string $CONNECTION_STRING \
            --container-name opsmanager \
            --type page \
            --file opsman-image-2.6.x.vhd
            ```

    * If you use managed disks:

        1. Copy the <%= vars.ops_manager %> image into your storage account using the Azure CLI.

            ```console
            az storage blob copy start --source-uri $OPS_MAN_IMAGE_URL \
            --connection-string $CONNECTION_STRING \
            --destination-container opsmanager \
            --destination-blob opsman-image-2.6.x.vhd
            ```

        1. Copying the image may take several minutes. Run the following command and examine the output under `"copy"`:

            ```console
            az storage blob show --name opsman-image-2.6.x.vhd \
            --container-name opsmanager \
            --connection-string $CONNECTION_STRING
            ...
            "copy": {
              "completionTime": "2017-06-26T22:24:11+00:00",
              "id": "b9c8b272-a562-4574-baa6-f1a04afcefdf",
              "progress": "53687091712/53687091712",
              "source": "http<span>s:/</span>/opsmanagerwestus.blob.core.windows.net/images/opsman-image-2.6.x.vhd",
              "status": "success",
              "statusDescription": null
            },
            ```

            1. Wait a few moments and re-run the command above if `status` is `pending`. When `status` reads `success`, continue to the next step.

1. Create a public IP address named `ops-manager-ip`.

    ```console
    az network public-ip create --name ops-manager-ip \
    --resource-group $RESOURCE_GROUP --location $LOCATION \
    --allocation-method Static
   {
      "publicIp": {
        "dnsSettings": null,
        "etag": "W/\"4450ebe2-9e97-4b17-9cf2-44838339c661\"",
        "id": "/subscriptions/995b7eed-77ef-45ff-a5c9-1a405ffb8243/resourceGroups/cf-docs/providers/Microsoft.Network/publicIPAddresses/ops-manager-ip",
        "idleTimeoutInMinutes": 4,
        "ipAddress": "40.83.148.183",
        "ipConfiguration": null,
        "location": "westus",
        "name": "ops-manager-ip",
        "provisioningState": "Succeeded",
        "publicIpAddressVersion": "IPv4",
        "publicIpAllocationMethod": "Static",
        "resourceGroup": "cf-docs",
        "resourceGuid": "950d4831-1bec-42da-8a79-959bcddea9dd",
        "tags": null,
        "type": "Microsoft.Network/publicIPAddresses"
      }
    }
    ```

    If you do not want to use a public IP for <%= vars.ops_manager %>, skip this step.

1. Record the `ipAddress` from the output above. This is the public IP address of <%= vars.ops_manager %>.

1. Create a network interface for <%= vars.ops_manager %>.

    ```console
    az network nic create --vnet-name pcf-virtual-network \
    --subnet pcf-infrastructure-subnet --network-security-group opsmgr-nsg \
    --private-ip-address 10.0.4.4 \
    --public-ip-address ops-manager-ip \
    --resource-group $RESOURCE_GROUP \
    --name opsman-nic --location $LOCATION
    ```

    If you do not want use a public IP address for <%= vars.ops_manager %>, remove the `--public-ip-address ops-manager-ip` flag and value.

1. Create a keypair on your local machine with the username `ubuntu`. For example, enter the following command:

    ```console
    ssh-keygen -t rsa -f opsman -C ubuntu
    ```

    When prompted for a passphrase, press the `enter` key to provide an empty passphrase.

1. Create the <%= vars.ops_manager %> VM.

    * If you are using unmanaged disks, run the following command to create your <%= vars.ops_manager %> VM, replacing `PATH-TO-PUBLIC-KEY` with the path to your public key .pub file:

        ```console
        az vm create --name opsman-2.6.x --resource-group $RESOURCE_GROUP \
        --location $LOCATION \
        --nics opsman-nic \
        --image https://$STORAGE_NAME.my-azure-instance.com/opsmanager/opsman-image-2.6.x.vhd \
        --os-disk-name opsman-2.6.x-osdisk \
        --os-disk-size-gb 128 \
        --os-type Linux \
        --use-unmanaged-disk \
        --storage-account $STORAGE_NAME \
        --storage-container-name opsmanager \
        --admin-username ubuntu \
        --ssh-key-value PATH-TO-PUBLIC-KEY
        ```

        Replace `my-azure-instance.com` with the URL of your Azure instance. Find the complete source URL in the Azure UI by viewing the **Blob properties** of the <%= vars.ops_manager %> image you created earlier in this procedure.<br><br>

    * If you are using Azure managed disks:

        1. Create a managed image from the <%= vars.ops_manager %> VHD file:

            ```console
            az image create --resource-group $RESOURCE_GROUP \
            --name opsman-image-2.6.x \
            --source https://$STORAGE_NAME.blob.core.windows.net/opsmanager/image-2.6.x.vhd \
            --location $LOCATION \
            --os-type Linux
            ```

            If you are using Azure China, Azure Government Cloud, or Azure Germany, replace `blob.core.windows.net` with the following:

            * For Azure China, use `blob.core.chinacloudapi.cn`. For more information, see the [Azure documentation](https://docs.microsoft.com/en-us/azure/china/china-get-started-developer-guide) for more information.
            * For Azure Government Cloud, use `blob.core.usgovcloudapi.net`. For more information, see the [Azure documentation](https://docs.microsoft.com/en-us/azure/azure-government/documentation-government-services-storage) for more information.
            * For Azure Germany, use `blob.core.cloudapi.de`. For more information, see the [Azure documentation](https://docs.microsoft.com/en-us/azure/germany/germany-developer-guide) for more information.

        1. Create your <%= vars.ops_manager %> VM, replacing `PATH-TO-PUBLIC-KEY` with the path to your public key `.pub` file.

            ```console
            az vm create --name opsman-2.6.x --resource-group $RESOURCE_GROUP \
             --location $LOCATION \
             --nics opsman-nic \
             --image opsman-image-2.6.x \
             --os-disk-size-gb 128 \
             --os-disk-name opsman-2.6.x-osdisk \
             --admin-username ubuntu \
             --size Standard_DS2_v2 \
             --storage-sku Standard_LRS \
             --ssh-key-value PATH-TO-PUBLIC-KEY
            ```

1. If you plan to install more than one tile in this <%= vars.ops_manager %> installation, do the following to increase the size of the <%= vars.ops_manager %> VM disk. You can repeat this process and increase the disk again at a later time if necessary.

    <p class='note'><strong>Note:</strong> If you use Azure Stack, you must increase the <%= vars.ops_manager %> VM disk size using the Azure Stack UI.</p>

    1. Run the following command to stop the VM and detach the disk:

        ```console
        az vm deallocate --name opsman-2.6.x \
        --resource-group $RESOURCE_GROUP
        ```

    1. Run the following command to resize the disk to 128&nbsp;GB:

        ```console
        az disk update --size-gb 128 --name opsman-2.6.x-osdisk \
        --resource-group $RESOURCE_GROUP
        ```

    1. Run the following command to start the VM:

        ```console
        az vm start --name opsman-2.6.x --resource-group $RESOURCE_GROUP
        ```


## <a id='post-deploy'></a> Step 5: Complete BOSH Director Configuration

To finish configuring BOSH Director:

1. Navigate to your DNS provider, and create an entry that points a fully qualified domain name (FQDN) to the public IP address of <%= vars.ops_manager %>. As a best practice, always use the FQDN to access <%= vars.ops_manager %>.

1. Continue to [Configuring BOSH Director on Azure](config-manual.html).
