---
title: Deploying Tanzu Operations Manager on Azure using Terraform
owner: Ops Manager
---

<html class="list-style-none"></html>

This topic tells you about the steps you must follow before you deploy <%= vars.ops_manager_first %> to Azure using Terraform templates.

<%= partial "/pcf/warning-terraform" %>

The Azure Terraform templates describe a set of Azure resources and properties.

For more information about how Terraform creates resources in Azure, see [Azure Provider](https://www.terraform.io/docs/providers/azurerm/index.html) on the Terraform site.

You might also find it helpful to review different deployment options in
[Azure Reference Architecture](../refarch/azure/azure_ref_arch.html).

## <a id='prereqs'></a> Prerequisites

In addition to fulfilling the prerequisites listed in [Installing <%= vars.ops_manager %> on Azure](../install/azure.html), ensure you have the following:

* The Terraform CLI. For information about installing the Terraform CLI, see [Installing Terraform](https://www.terraform.io/intro/getting-started/install.html) in the Terraform documentation.

* In your Azure project, ensure you have completed the steps in [Preparing to Deploy <%= vars.ops_manager %> on Azure Using Terraform](prepare-azure-terraform.html) to create a service principal.

## <a id='download'></a> Step 1: Download templates and edit variables file

Before you can run Terraform commands to provision infrastructure resources, you must download the Azure Terraform Templates and create a Terraform template variables file. To download the templates and create the template variables file:

1. On [VMware Tanzu Network](https://network.pivotal.io), navigate to the <%= vars.app_runtime_first %> release.

1. Download the Azure Terraform Templates ZIP file. You can use the templates to deploy <%= vars.app_runtime_abbr %> or <%= vars.k8s_runtime_first %>.

1. Extract the contents of the ZIP file.

1. Move the extracted folder to the `workspace` directory on your local machine.

1. On the command line, navigate to the directory. For example:

    <pre class="terminal">
    $ cd ~/workspace/pivotal-cf-terraforming-azure
    </pre>

1. Navigate to the `terraforming-pas` or `terraforming-pks` directory that contains the Terraform files for your runtime.

1. In the runtime directory, create a text file named `terraform.tfvars`.

1. Open the `terraform.tfvars` file and add the following:

    ```
    subscription_id       = "YOUR-SUBSCRIPTION-ID"
    tenant_id             = "YOUR-TENANT-ID"
    client_id             = "YOUR-APP-ID"
    client_secret         = "YOUR-CLIENT-SECRET"

    env_name              = "YOUR-ENVIRONMENT-NAME"
    env_short_name        = "YOUR-ENVIRONMENT-SHORTNAME"
    location              = "YOUR-AZURE-LOCATION"
    ops_manager_image_uri = "YOUR-OPS-MAN-IMAGE-URI"
    dns_suffix            = "YOUR-DNS-SUFFIX"
    vm_admin_username     = "YOUR-ADMIN-USERNAME"
    ```

1. Edit the values in the file according to the following table. For information about locating your Azure service principal values, see [Preparing to Deploy <%= vars.ops_manager %> on Azure Using Terraform](prepare-azure-terraform.html).
  <table class=“table”>
  <thead>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    </thead>
    <tr>
      <td><code>YOUR-SUBSCRIPTION-ID</code></td>
      <td>Enter the subscription ID of your Azure service principal. Terraform uses this ID when creating resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-TENANT-ID</code></td>
      <td>Enter the tenant ID of your Azure service principal. Terraform uses this ID when creating resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-APP-ID</code></td>
      <td>Enter the app ID of your Azure service principal. Terraform uses this ID when creating resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-CLIENT-SECRET</code></td>
      <td>Enter your Azure service client secret. Terraform requires this secret to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in Azure. Terraform prepends the names of the resources it creates with this environment name. This environment variable is also used to name the Azure resource group created for the deployment. Example: <code>mypcf</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-SHORTNAME</code></td>
      <td>Enter a name to use when creating storage accounts in Azure. Must be a-z only and no longer than 10 characters. Example: <code>myazure</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZURE-LOCATION</code></td>
      <td>Enter the name of the Azure location in which you want Terraform to create resources. Example: <code>Central US</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-IMAGE-URI</code></td>
      <td>
        Enter the URL for the <%= vars.ops_manager %> Azure image you want to boot. You can find this code in the PDF included with the <%= vars.ops_manager %> release on <a href="https://network.pivotal.io/">VMware Tanzu Network</a>.
        <br><br>
        To prevent the creation of an <%= vars.ops_manager %> VM, set this value to an empty string (<code>""</code>). When using Platform Automation, you must disallow the creation of the <%= vars.ops_manager %> VM from Terraform. For more information, see <a href="https://network.tanzu.vmware.com/products/platform-automation">Platform Automation</a>.
      </td>
    </tr>
    <tr>
      <td><code>YOUR-DNS-SUFFIX</code></td>
      <td>Enter a domain name to use as part of the system domain for your deployment. Terraform creates DNS records in Azure using <code>YOUR-ENVIRONMENT-NAME</code> and <code>YOUR-DNS-SUFFIX</code>. For example, if you enter <code>example.com</code> for your DNS suffix and have <code>pcf</code> as your environment name, Terraform creates DNS records at <code>pcf.example.com</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-ADMIN-USERNAME</code></td>
      <td>Enter the admin username you want to use for your <%= vars.ops_manager %> deployment.</td>
    </tr>
  </table>

## <a id='variables'></a> Step 2: Add variables for <%= vars.segment_runtime_full %> (optional)

Complete this section if you plan to deploy the <%= vars.segment_runtime_full %> tile.

<p> You can see the configurable options by opening the <code>variables.tf</code> file and locating the variables with default values.</p>

Add the following variable to your `terraform.tfvars` file. This causes Terraform to create an additional HTTP load balancer and DNS record to use for the <%= vars.segment_runtime_full %> tile.

```
isolation_segment = "true"
```

## <a id='resources'></a> Step 3: Create Azure resources with Terraform

Follow these steps to use the Terraform CLI to create resources on Azure:

1. From the directory that contains the Terraform files, run `terraform init` to initialize the directory based on the information you specified in the `terraform.tfvars` file.
  <pre class="terminal">$ terraform init</pre>

1. Run the following command to create the execution plan for Terraform.
  <pre class="terminal">$ terraform plan -out=plan</pre>

1. Run the following command to execute the plan from the previous step. It may take several minutes for Terraform to create all the resources in Azure.
  <pre class="terminal">$ terraform apply plan</pre>

## <a id='dns'></a> Step 4: Create DNS record

1. In a browser, navigate to the DNS provider for the DNS suffix you entered in your `terraform.tfvars` file.

1. Create a new name server (NS) record for your system domain. Your system domain is `YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX`.

1. In this record, enter the name servers included in `env_dns_zone_name_servers` from your Terraform output.

## <a id='next'></a> Next steps

Go to the next step in the deployment, [Configuring BOSH Director on Azure using Terraform](config-terraform.html).
