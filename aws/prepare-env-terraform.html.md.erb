---
title: Deploying Ops Manager on AWS using Terraform
owner: Ops Manager
---

You must follow these steps before deploying <%= vars.ops_manager_first %> on Amazon Web Services (AWS) using Terraform templates.

<%= partial "/pcf/warning-terraform" %>

The Terraform template for <%= vars.ops_manager %> on AWS describes a set of AWS resources and properties. For more information about how Terraform creates resources in AWS, see [AWS Provider](https://www.terraform.io/docs/providers/aws/index.html) in the Terraform documentation.

If you are deploying <%= vars.app_runtime_first %>,
review different deployment options in [AWS Reference Architecture](../refarch/aws/aws_ref_arch.html).

## <a id='prereqs'></a> Prerequisites

Before you deploy <%= vars.ops_manager %> on AWS:

* If you intend to install <%= vars.app_runtime_abbr %>, see [<%= vars.ops_manager %> on AWS Requirements](../install/aws.html).

* If you intend to install <%= vars.k8s_runtime_first %>, see [AWS Prerequisites and Resource Requirements](https://docs.pivotal.io/tkgi/aws-requirements.html).

In addition to reviewing the prerequisites for your runtime, ensure you have:

* The [Terraform CLI](https://www.terraform.io/intro/getting-started/install.html)

* In your AWS account, ensure you have an IAM user with the following permissions:
  * **IAM policies**:
      * AmazonEC2FullAccess
      * AmazonRDSFullAccess
      * AmazonRoute53FullAccess
      * AmazonS3FullAccess
      * AmazonVPCFullAccess
      * IAMFullAccess
      * AWSKeyManagementServicePowerUser
  * **Key policies**:
      * kms:UpdateKeyDescription action allowed


## <a id='download'></a> Step 1: Download templates and edit variables file

Before you can run Terraform commands to provision infrastructure resources, you must download the AWS Terraform templates and create a Terraform template variables file. To download the templates and create a template variables file:

1. On [VMware Tanzu Network](https://network.pivotal.io), navigate to the **<%= vars.app_runtime_full %>** release.

1. Download the AWS Terraform templates ZIP file.

1. Extract the contents of the ZIP file.

1. Move the extracted folder to the `workspace` directory on your local machine.

1. On the command line, navigate to the extracted folder. For example:

    ```
    cd ~/workspace/pivotal-cf-terraforming-aws
    ```

1. Navigate to the `terraforming-pas` or `terraforming-pks` directory that contains the Terraform files for your runtime.

1. In the runtime directory, create a text file named `terraform.tfvars`.

1. Open the `terraform.tfvars` file and add:

    ```
    env_name           = "YOUR-ENVIRONMENT-NAME"
    access_key         = "YOUR-ACCESS-KEY"
    secret_key         = "YOUR-SECRET-KEY"
    region             = "YOUR-AWS-REGION"
    availability_zones = ["YOUR-AZ-1", "YOUR-AZ-2", "YOUR-AZ-3"]
    ops_manager_ami    = "YOUR-OPS-MAN-IMAGE-AMI"
    dns_suffix         = "YOUR-DNS-SUFFIX"

    ssl_cert = <<SSL_CERT
    -----BEGIN CERTIFICATE-----
    YOUR-CERTIFICATE
    -----END CERTIFICATE-----
    SSL_CERT

    ssl_private_key = <<SSL_KEY
    -----BEGIN EXAMPLE RSA PRIVATE KEY-----
    YOUR-PRIVATE-KEY
    -----END EXAMPLE RSA PRIVATE KEY-----
    SSL_KEY
    ```

1. Edit the values in the file according to the table below:
  <table>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in AWS. Terraform prepends the names of the resources it creates with this environment name.
      <p class='note'><strong>Note:</strong> You can only enter lowercase alphanumeric characters and hyphens. Examples include <code>pcf</code>, <code>pas</code>, and <code>pks</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-ACCESS-KEY</code></td>
      <td>Enter your AWS Access Key ID of the AWS account in which you want Terraform to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-SECRET-KEY</code></td>
      <td>Enter your AWS Secret Access Key of the AWS account in which you want Terraform to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-AWS-REGION</code></td>
      <td>Enter the name of the AWS region in which you want Terraform to create resources. For example, <code>us-central1</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZ-1<br>YOUR-AZ-2<br>YOUR-AZ-3</code></td>
      <td>Enter three availability zones from your region. For example, <code>us-central-1a</code>, <code>us-central-1b</code>, <code>us-central-1c</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-IMAGE-AMI</code></td>
      <td>
        Enter the source code for the <%= vars.ops_manager %> Amazon Machine Image (AMI) you want to boot. You can find this code in the PDF included with the <%= vars.ops_manager %> release on VMware Tanzu Network.
        <br><br>
        If you want to encrypt your <%= vars.ops_manager %> VM, create an encrypted AMI copy from the AWS EC2 dashboard and enter the source code for the copied <%= vars.ops_manager %> image instead. For more information about copying an AMI, see [Launch an <%= vars.ops_manager %> AMI](deploy-manual.html#pcfaws-om-ami) in _Deploying <%= vars.ops_manager %> on AWS_.
        <br><br>
        To prevent the creation of an <%= vars.ops_manager %> VM, set this value to an empty string (<code>""</code>). When using Platform Automation, you must disallow the creation of the <%= vars.ops_manager %> VM from Terraform. For more information, see [Platform Automation](https://docs.pivotal.io/platform-automation).
      </td>
    </tr>
    <tr>
      <td><code>YOUR-DNS-SUFFIX</code></td>
      <td>Enter a domain name to use as part of the system domain for your deployment. Terraform creates DNS records in AWS using <code>YOUR-ENVIRONMENT-NAME</code> and <code>YOUR-DNS-SUFFIX</code>. For example, if you enter <code>example.com</code> for your DNS suffix and have <code>pcf</code> as your environment name, Terraform creates DNS records at <code>pcf.example.com</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-CERTIFICATE</code></td>
      <td>Enter a certificate to use for HTTP load balancing. For production environments, use a certificate from a Certificate Authority (CA). For test environments, you can use a self-signed certificate.

      Your certificate must specify your system domain as the common name. Your system domain is <code>YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX</code>.

      It also must include the following subdomains: <code>\*.sys.YOUR-SYSTEM-DOMAIN</code>, <code>\*.login.sys.YOUR-SYSTEM-DOMAIN</code>, <code>\*.uaa.sys.YOUR-SYSTEM-DOMAIN</code>, <code>\*.apps.YOUR-SYSTEM-DOMAIN</code>.</p></td>
    </tr>
    <tr>
      <td><code>YOUR-PRIVATE-KEY</code></td>
      <td>Enter a private key for the certificate you entered.</td>
    </tr>
  </table>


## <a id='variables'></a> Step 2: Add optional variables

Complete this step if you want to:

* Use an AWS Relational Database Service (RDS) for your <%= vars.app_runtime_abbr %> deployment. For more information, see [Getting started with Amazon RDS](https://aws.amazon.com/rds/resources/) in the AWS documentation.

* Deploy the <%= vars.segment_runtime_full %> tile.

In your `terraform.tfvars` file, specify the appropriate variables from the sections below.

<p class='note'><strong>Note:</strong> You can see the configurable options by opening the <code>variables.tf</code> file and looking for variables with default values.</p>

### <a id='iso_seg'></a> Isolation segments

If you plan to deploy the <%= vars.segment_runtime_full %> tile, add the variables below to your `terraform.tfvars` file, replacing `YOUR-CERTIFICATE` and `YOUR-PRIVATE-KEY` with a certificate and private key.

```
create_isoseg_resources = 1

iso_seg_ssl_cert = <<ISO_SEG_SSL_CERT
-----BEGIN CERTIFICATE-----
YOUR-CERTIFICATE
-----END CERTIFICATE-----
ISO_SEG_SSL_CERT

iso_seg_ssl_cert_private_key = <<ISO_SEG_SSL_KEY
-----BEGIN EXAMPLE RSA PRIVATE KEY-----
YOUR-PRIVATE-KEY
-----END EXAMPLE RSA PRIVATE KEY-----
ISO_SEG_SSL_KEY
```

Where:

* `YOUR-CERTIFICATE` is your certificate.
* `YOUR-PRIVATE-KEY` is your private key.

This causes Terraform to create an additional HTTP load balancer across three availability zones to use for the <%= vars.segment_runtime_full %> tile.

### <a id='cloudsql'></a> RDS

To use an AWS RDS for your deployment:

1. Add the following to your `terraform.tfvars` file:

    ```
    rds_instance_count = 1
    ```

1. To specify a username for RDS authentication, add the following variable to your `terraform.tfvars` file:

    ```
    rds_db_username = "YOUR-DATABASE-NAME"
    ```
    Where `YOUR-DATABASE-NAME` is the name of your RDS.


## <a id='resources'></a> Step 3: Create AWS resources with Terraform

To use the Terraform CLI to create resources on AWS:

1. From the directory that contains the Terraform files, initialize the directory based on the information you specified in the `terraform.tfvars` file by running:

    ```
    terraform init
    ```

    <p class='note'><strong>Note:</strong> If you see the error <code>heredoc not terminated</code>,
    then open the <code>terraform.tfvars</code> file and delete any trailing spaces that follow
    heredoc terminators such as EOF.
    Then, run the <code>terraform init</code> command again.
    </p>

1. To create the execution plan for Terraform, run:

    ```
    terraform plan -out=plan
    ```

1. To execute the plan from the previous step, run:

    ```
    terraform apply plan
    ```
    It may take several minutes for Terraform to create all the resources in AWS.


## <a id='dns'></a> Step 4: Create DNS record

To create a DNS record for your deployment:

1. In a browser, navigate to the DNS provider for the DNS suffix you entered in your `terraform.tfvars` file.

1. Create a new NS record for your system domain. Your system domain is `YOUR-ENVIRONMENT-NAME.YOUR-DNS-SUFFIX`.

1. In this record, enter the name servers included in `env_dns_zone_name_servers` from your Terraform output.

<p class='note'><strong>Note:</strong> Terraform creates a <code>Route53</code> recordset
for the domain prefixed with the environment name.
If your base domain is registered with AWS,
ensure that the NS record from the terraform-created recordset is copied in the domain recordset before proceeding.
</p>

## <a id='next'></a> Next steps

Proceed to the next step in the deployment, [Configuring BOSH Director on AWS Using Terraform](config-terraform.html).
